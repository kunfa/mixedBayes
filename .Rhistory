devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_cran_comments()
library(BayesQVGEL)
?BayesQVGEL
devtools::build_manual()
devtools::sumbit_cran()
devtools::submit_cran()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::document()
devtools::cran_submit()
devtools::submit_cran()
devtools::build_manual()
devtools::document()
load("data.rda")
getwd()
load("data.rda")
ls()
g
dim(g)
coeff
dim(w)
k
library(MASS)
n=60;m=3;q=3;k=3;p=9
sigma2=1
sig = matrix(0,m,m)
for (i in 1:m)
{
for(j in 1:m)
{
sig[i,j] = 0.5^abs(i-j)
}
}
g = mvrnorm(n,rep(0,m),sig)
g = as.matrix(g)
g = scale(g)
beta_true = rep(0,m)
beta_true[c(1,2)] = runif(2,0.4,0.8)
#generate environment(n*q2)
dummy0 <- as.numeric(g[,1] <= -0.5)
dummy0=dummy0+1
dummy1 <- as.numeric(g[,1] > -0.5 & g[,1] <= 0)
dummy1=dummy1*2+1
dummy2 <- as.numeric(g[,1] > 0 & g[,1] <= 0.5)
dummy2=dummy2*3+1
e = cbind(dummy0,dummy1,dummy2)
e = scale(e)
alpha= runif(6,0.4,0.8)
w = c()
for (i in 1:m)
{
w = cbind(w,g[,i]*e)
}
eta_true = rep(0,p)
eta_true[4:6] = runif(3,0.4,0.8)
eta_true[7:9] = runif(3,0.4,0.8)
coeff = c(beta_true,eta_true)
z = cbind(rep(1,k),c(1:k))
c = ncol(z)
ata=runif(c,0,1)
y = matrix(rep(0,n*k),n,k)
for(i in 1:n){
ei = t(replicate(k,e[i,]))
ei = cbind(ei,rep(1,k),c(1:k),c(1:k)^2)
gi = t(replicate(k,g[i,]))
wi = t(replicate(k,w[i,]))
quant=0.5
error = rnorm(k,0,1)
error = error -quantile(error,probs = quant)
y[i,] = ei%*%alpha+gi%*%beta_true+wi%*%eta_true+z%*%ata+error
}
C = cbind(rep(1,k),c(1:k),c(1:k)^2)
save(C,coeff,e,g,k,w,y,file="data.rda")
devtools::document()
devtools::document()
devtools::build_manual()
devtools::submit_cran()
devtools::submit_cran()
install.packages("BayesQVGEL")
install.packages(c("processx", "ps"))
install.packages("tinytex")
install.packages("zip")
install.packages("vctrs")
devtools::submit_cran()
devtools::document()
devtools::submit_cran()
library(BayesQVGEL)
install.packages("BayesQVGEL")
install.packages("mixedBayes")
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::build_manual()
devtools::submit_cran()
devtools::document()
devtools::submit_cran()
devtools::build_manual()
library(mixedBayes)
?mixedBayes
devtools::submit_cran()
install.packages(c("callr", "curl", "digest", "ggplot2", "ggsci", "mixedBayes", "RcppArmadillo", "RcppEigen", "rmarkdown", "shape", "spinBayes", "systemfonts", "tidyselect", "usethis", "VGAM"))
install.packages(c("digest", "ggsci", "pkgbuild", "processx", "ragg", "remotes", "sass", "spinBayes", "tidyselect", "tinytex"))
install.packages("roxygen2")
install.packages("desc")
devtools::document(roclets = c('rd', 'collate', 'namespace', 'vignette'))
install.packages("devtools")
devtools::document(roclets = c('rd', 'collate', 'namespace', 'vignette'))
devtools::document(roclets = c('rd', 'collate', 'namespace', 'vignette'))
devtools::document(roclets = c('rd', 'collate', 'namespace', 'vignette'))
devtools::document(roclets = c('rd', 'collate', 'namespace', 'vignette'))
matrix(c(rep(1,n*c)),nrow=c)
load("data.rda")
load("data.rda")
getwd()
load("data.rda")
fit = mixedBayes(y,e,X,g,w,k)
n = nrow(g)
m = ncol(g)
p = ncol(w)
E = cbind(e,X)
o = ncol(X)
q = ncol(E)
c = ncol(z)
n1 = n/k
hatTau=1
hatV = rep(1,n)
z = cbind(rep(1,k),c(1:k))
c = ncol(z)
n1 = n/k
hatTau=1
hatV = rep(1,n)
hatSg1 = rep(1,m)
hatSg21= rep(1,p)
hatSg22 = rep(1,m)
xi1=(1-2*quant)/(quant*(1-quant))
quant=0.5
xi1=(1-2*quant)/(quant*(1-quant))
xi2 = sqrt(2/(quant*(1-quant)))
hatEtaSq1=1
hatEtaSq2=1
r1=1
r2=1
a=1
b=1
hatAta=matrix(c(rep(1,n1*c)),nrow=c)
hatBeta = rep(1,m)
hatEta1 = rep(1,p)
hatEta2 = matrix(c(rep(1,p)),nrow=q-o)
hatAlpha = rep(1,q)
invSigAlpha0 = diag(rep(10^-3,q))
alpha1=1
gamma1=1
hatPhiSq=1
progress=0
hatPi1=1/2
hatPi2=1/2
sh1=1
sh0=1
debugging=FALSE
RBGLSS(y,e,g,w,max.steps,q,o,k,hatBeta,hatEta2,hatAlpha,hatAta,z,hatTau,hatV,hatSg1,hatSg22,invSigAlpha0,
hatPi1,hatPi2,hatEtaSq1,hatEtaSq2,xi1,xi2,r1,r2,hatPhiSq,a,b,alpha1,gamma1,sh1,sh0,progress)
sourceCpp("RBGLSS.cpp")
library(Rcpp)
library(RcppArmadillo)
sourceCpp("RBGLSS.cpp")
sourceCpp("RBGLSS.cpp")
sourceCpp("RBGLSS.cpp")
RBGLSS(y,e,g,w,max.steps,q,o,k,hatBeta,hatEta2,hatAlpha,hatAta,z,hatTau,hatV,hatSg1,hatSg22,invSigAlpha0,
hatPi1,hatPi2,hatEtaSq1,hatEtaSq2,xi1,xi2,r1,r2,hatPhiSq,a,b,alpha1,gamma1,sh1,sh0,progress)
max.steps=10000
RBGLSS(y,e,g,w,max.steps,q,o,k,hatBeta,hatEta2,hatAlpha,hatAta,z,hatTau,hatV,hatSg1,hatSg22,invSigAlpha0,
hatPi1,hatPi2,hatEtaSq1,hatEtaSq2,xi1,xi2,r1,r2,hatPhiSq,a,b,alpha1,gamma1,sh1,sh0,progress)
o
invSigAlpha0 = diag(rep(10^-3,q))
dim(invSigAlpha0)
devtools::release()
install.packages("httr")
3
devtools::release()
check_win_devel()
devtools::check_win_devel()
devtools::check_rhub()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_release()
devtools::release_checks()
devtools::release()
devtools::release()
devtools::check_win_devel()
usethis::use_testthat()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_release()
devtools::release()
devtools::check_win_release()
devtools::build()
devtools::check_win_devel()
devtools::check_win_release()
devtools::build()
library(RcppArmadillo)
library(Rcpp)
getwd()
sourceCpp("BGL.cpp")
setwd("/Users/kunfan/Documents/GitHub/mixedBayes/src")
sourceCpp("BGL.cpp")
devtools::install_github("kunfa/mixedBayes")
library(mixedBayes)
?mixedBayes
library(Rcpp)
library(RcppArmadillo)
getwd()
setwd("/Users/kunfan/Documents/GitHub/mixedBayes/src")
sourceCpp("RBGLSS.cpp")
sourceCpp("RBGLSS.cpp")
sourceCpp("RBGL.cpp")
sourceCpp("RBGL.cpp")
sourceCpp("BGL.cpp")
sourceCpp("BGLSS.cpp")
sourceCpp("BLSS.cpp")
devtools::cran_release()
devtools::document()
devtools::release()
devtools::document()
devtools::submit_cran()
devtools::document()
devtools::document()
devtools::submit_cran()
devtools::document()
devtools::cran_release()
devtools::submit_cran()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::submit_cran()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::submit_cran()
devtools::document()
devtools::document()
devtools::submit_cran()
library(pkgdown)
pkgdown::build_site()
